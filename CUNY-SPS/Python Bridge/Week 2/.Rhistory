m2 = as.integer((N / 2) + 1) - 1
median = (numbers[m1] + numbers[m2]) / 2
} else {
# Convert to integer, match position
m = as.integer((N + 1) / 2) - 1
median = numbers[m]
}
return (round(median))
}
# Import transaction data into R
mydata = read.csv("https://raw.githubusercontent.com/maldonag/KVGMV9AW8U/master/CUNY-SPS/R%20Bridge/Week2/Homework2/Transact.csv")  # read csv file
transact <- data.frame(mydata)
summary(transact)
# Mean and median for attributes t1 and t2
t1mean <- calculate_mean(transact$t1)
t1median <- calculate_median(transact$t1)
t2mean <- calculate_mean(transact$t2)
t2median <- calculate_median(transact$t2)
paste("t1 mean is ", t1mean,", and t2 median is ", t1median)
paste("t2 mean is ", t2mean,", and t2 median is ", t2median)
x <- transact$X
t1 <- transact$t1
t2 <- transact$t2
time <- transact$time
transaction <- data.frame(subset(transact, (t1 - t2) & time >= 10000))
colnames(transaction) <- c("Row", "Transaction1", "Transaction2", "Time")
summary(transaction)
t1mean <- calculate_mean(transaction$Transaction1)
t1median <- calculate_median(transaction$Transaction1)
t2mean <- calculate_mean(transaction$Transaction2)
t2median <- calculate_median(transaction$Transaction2)
paste("t1 mean is ", t1mean,", and t2 median is ", t1median)
paste("t2 mean is ", t2mean,", and t2 median is ", t2median)
# set transaction1 value type to character type
transaction$Transaction1 <- as.character(transaction$Transaction1)
# we find all values in transaction1 equal to 0, and we index it for replacement
transIndex <- transaction$Transaction1 == "0"
# We replace all the occurances of the index value with NULL
transaction$Transaction1[transIndex] <- "NULL"
example <- transaction$Row #[order(transaction$Row)]
transaction
# Please see #1
colnames(transaction) <- c("Row", "Transaction1", "Transaction2", "Time")
transaction
knitr::opts_chunk$set(echo = TRUE)
# Mean function
calculate_mean <- function(numbers) {
s = sum(numbers)
N = length(numbers)
# Calculate the mean
result = s / N
return (result)
}
# Median function
calculate_median <-function(numbers) {
N = length(numbers)
sort(numbers)
# Fine the median
if (N %% 2 == 0) {
# if N is even, convert to int and match position
m1 = as.integer(N / 2) - 1
m2 = as.integer((N / 2) + 1) - 1
median = (numbers[m1] + numbers[m2]) / 2
} else {
# Convert to integer, match position
m = as.integer((N + 1) / 2) - 1
median = numbers[m]
}
return (round(median))
}
# Import transaction data into R
mydata = read.csv("https://raw.githubusercontent.com/maldonag/KVGMV9AW8U/master/CUNY-SPS/R%20Bridge/Week2/Homework2/Transact.csv")  # read csv file
transact <- data.frame(mydata)
summary(transact)
# Mean and median for attributes t1 and t2
t1mean <- calculate_mean(transact$t1)
t1median <- calculate_median(transact$t1)
t2mean <- calculate_mean(transact$t2)
t2median <- calculate_median(transact$t2)
paste("t1 mean is ", t1mean,", and t2 median is ", t1median)
paste("t2 mean is ", t2mean,", and t2 median is ", t2median)
x <- transact$X
t1 <- transact$t1
t2 <- transact$t2
time <- transact$time
transaction <- data.frame(subset(transact, (t1 - t2) & time >= 10000))
colnames(transaction) <- c("Row", "Transaction1", "Transaction2", "Time")
summary(transaction)
t1mean <- calculate_mean(transaction$Transaction1)
t1median <- calculate_median(transaction$Transaction1)
t2mean <- calculate_mean(transaction$Transaction2)
t2median <- calculate_median(transaction$Transaction2)
paste("t1 mean is ", t1mean,", and t2 median is ", t1median)
paste("t2 mean is ", t2mean,", and t2 median is ", t2median)
# set transaction1 value type to character type
transaction$Transaction1 <- as.character(transaction$Transaction1)
# we find all values in transaction1 equal to 0, and we index it for replacement
transIndex <- transaction$Transaction1 == "0"
# We replace all the occurances of the index value with NULL
transaction$Transaction1[transIndex] <- "NULL"
example <- transaction$Row #[order(transaction$Row)]
transaction
# Please see #1
knitr::opts_chunk$set(echo = TRUE)
# Mean function
calculate_mean <- function(numbers) {
s = sum(numbers)
N = length(numbers)
# Calculate the mean
result = s / N
return (result)
}
# Median function
calculate_median <-function(numbers) {
N = length(numbers)
sort(numbers)
# Fine the median
if (N %% 2 == 0) {
# if N is even, convert to int and match position
m1 = as.integer(N / 2) - 1
m2 = as.integer((N / 2) + 1) - 1
median = (numbers[m1] + numbers[m2]) / 2
} else {
# Convert to integer, match position
m = as.integer((N + 1) / 2) - 1
median = numbers[m]
}
return (round(median))
}
# Import transaction data into R
mydata = read.csv("https://raw.githubusercontent.com/maldonag/KVGMV9AW8U/master/CUNY-SPS/R%20Bridge/Week2/Homework2/Transact.csv")  # read csv file
transact <- data.frame(mydata)
summary(transact)
# Mean and median for attributes t1 and t2
t1mean <- calculate_mean(transact$t1)
t1median <- calculate_median(transact$t1)
t2mean <- calculate_mean(transact$t2)
t2median <- calculate_median(transact$t2)
paste("t1 mean is ", t1mean,", and t2 median is ", t1median)
paste("t2 mean is ", t2mean,", and t2 median is ", t2median)
x <- transact$X
t1 <- transact$t1
t2 <- transact$t2
time <- transact$time
#transaction <- data.frame(subset(transact, (t1 - t2) & time >= 10000))
colnames(transaction) <- c("Row", "Transaction1", "Transaction2", "Time")
summary(transaction)
t1mean <- calculate_mean(transaction$Transaction1)
knitr::opts_chunk$set(echo = TRUE)
# Mean function
calculate_mean <- function(numbers) {
s = sum(numbers)
N = length(numbers)
# Calculate the mean
result = s / N
return (result)
}
# Median function
calculate_median <-function(numbers) {
N = length(numbers)
sort(numbers)
# Fine the median
if (N %% 2 == 0) {
# if N is even, convert to int and match position
m1 = as.integer(N / 2) - 1
m2 = as.integer((N / 2) + 1) - 1
median = (numbers[m1] + numbers[m2]) / 2
} else {
# Convert to integer, match position
m = as.integer((N + 1) / 2) - 1
median = numbers[m]
}
return (round(median))
}
# Import transaction data into R
mydata = read.csv("https://raw.githubusercontent.com/maldonag/KVGMV9AW8U/master/CUNY-SPS/R%20Bridge/Week2/Homework2/Transact.csv")  # read csv file
transact <- data.frame(mydata)
summary(transact)
# Mean and median for attributes t1 and t2
t1mean <- calculate_mean(transact$t1)
t1median <- calculate_median(transact$t1)
t2mean <- calculate_mean(transact$t2)
t2median <- calculate_median(transact$t2)
paste("t1 mean is ", t1mean,", and t2 median is ", t1median)
paste("t2 mean is ", t2mean,", and t2 median is ", t2median)
x <- transact$X
t1 <- transact$t1
t2 <- transact$t2
time <- transact$time
#transaction <- data.frame(subset(transact, (t1 - t2) & time >= 10000))
colnames(transaction) <- c("Row", "Transaction1", "Transaction2", "Time")
summary(transaction)
t1mean <- calculate_mean(transaction$Transaction1)
knitr::opts_chunk$set(echo = TRUE)
# Mean function
calculate_mean <- function(numbers) {
s = sum(numbers)
N = length(numbers)
# Calculate the mean
result = s / N
return (result)
}
# Median function
calculate_median <-function(numbers) {
N = length(numbers)
sort(numbers)
# Fine the median
if (N %% 2 == 0) {
# if N is even, convert to int and match position
m1 = as.integer(N / 2) - 1
m2 = as.integer((N / 2) + 1) - 1
median = (numbers[m1] + numbers[m2]) / 2
} else {
# Convert to integer, match position
m = as.integer((N + 1) / 2) - 1
median = numbers[m]
}
return (round(median))
}
# Import transaction data into R
mydata = read.csv("https://raw.githubusercontent.com/maldonag/KVGMV9AW8U/master/CUNY-SPS/R%20Bridge/Week2/Homework2/Transact.csv")  # read csv file
transact <- data.frame(mydata)
summary(transact)
# Mean and median for attributes t1 and t2
t1mean <- calculate_mean(transact$t1)
t1median <- calculate_median(transact$t1)
t2mean <- calculate_mean(transact$t2)
t2median <- calculate_median(transact$t2)
paste("t1 mean is ", t1mean,", and t2 median is ", t1median)
paste("t2 mean is ", t2mean,", and t2 median is ", t2median)
x <- transact$X
t1 <- transact$t1
t2 <- transact$t2
time <- transact$time
transaction <- data.frame(subset(transact, (t1 >= 0 & time >= 1))
knitr::opts_chunk$set(echo = TRUE)
# Mean function
calculate_mean <- function(numbers) {
s = sum(numbers)
N = length(numbers)
# Calculate the mean
result = s / N
return (result)
}
# Median function
calculate_median <-function(numbers) {
N = length(numbers)
sort(numbers)
# Fine the median
if (N %% 2 == 0) {
# if N is even, convert to int and match position
m1 = as.integer(N / 2) - 1
m2 = as.integer((N / 2) + 1) - 1
median = (numbers[m1] + numbers[m2]) / 2
} else {
# Convert to integer, match position
m = as.integer((N + 1) / 2) - 1
median = numbers[m]
}
return (round(median))
}
# Import transaction data into R
mydata = read.csv("https://raw.githubusercontent.com/maldonag/KVGMV9AW8U/master/CUNY-SPS/R%20Bridge/Week2/Homework2/Transact.csv")  # read csv file
transact <- data.frame(mydata)
summary(transact)
# Mean and median for attributes t1 and t2
t1mean <- calculate_mean(transact$t1)
t1median <- calculate_median(transact$t1)
t2mean <- calculate_mean(transact$t2)
t2median <- calculate_median(transact$t2)
paste("t1 mean is ", t1mean,", and t2 median is ", t1median)
paste("t2 mean is ", t2mean,", and t2 median is ", t2median)
x <- transact$X
t1 <- transact$t1
t2 <- transact$t2
time <- transact$time
transaction <- data.frame(subset(transact, t1 >= 0 & time >= 1))
colnames(transaction) <- c("Row", "Transaction1", "Transaction2", "Time")
summary(transaction)
t1mean <- calculate_mean(transaction$Transaction1)
t1median <- calculate_median(transaction$Transaction1)
t2mean <- calculate_mean(transaction$Transaction2)
t2median <- calculate_median(transaction$Transaction2)
paste("t1 mean is ", t1mean,", and t2 median is ", t1median)
paste("t2 mean is ", t2mean,", and t2 median is ", t2median)
# set transaction1 value type to character type
transaction$Transaction1 <- as.character(transaction$Transaction1)
# we find all values in transaction1 equal to 0, and we index it for replacement
transIndex <- transaction$Transaction1 == "0"
# We replace all the occurances of the index value with NULL
transaction$Transaction1[transIndex] <- "NULL"
example <- transaction$Row #[order(transaction$Row)]
transaction
# Please see #1
example <- transaction$Transaction1[order(transaction$Row)]
example
knitr::opts_chunk$set(echo = TRUE)
# Mean function
calculate_mean <- function(numbers) {
s = sum(numbers)
N = length(numbers)
# Calculate the mean
result = s / N
return (result)
}
# Median function
calculate_median <-function(numbers) {
N = length(numbers)
sort(numbers)
# Fine the median
if (N %% 2 == 0) {
# if N is even, convert to int and match position
m1 = as.integer(N / 2) - 1
m2 = as.integer((N / 2) + 1) - 1
median = (numbers[m1] + numbers[m2]) / 2
} else {
# Convert to integer, match position
m = as.integer((N + 1) / 2) - 1
median = numbers[m]
}
return (round(median))
}
# Import transaction data into R
mydata = read.csv("https://raw.githubusercontent.com/maldonag/KVGMV9AW8U/master/CUNY-SPS/R%20Bridge/Week2/Homework2/Transact.csv")  # read csv file
transact <- data.frame(mydata)
summary(transact)
# Mean and median for attributes t1 and t2
t1mean <- calculate_mean(transact$t1)
t1median <- calculate_median(transact$t1)
t2mean <- calculate_mean(transact$t2)
t2median <- calculate_median(transact$t2)
paste("t1 mean is ", t1mean,", and t2 median is ", t1median)
paste("t2 mean is ", t2mean,", and t2 median is ", t2median)
x <- transact$X
t1 <- transact$t1
t2 <- transact$t2
time <- transact$time
transaction <- data.frame(subset(transact, t1 >= 0 & time <= 1000))
colnames(transaction) <- c("Row", "Transaction1", "Transaction2", "Time")
summary(transaction)
t1mean <- calculate_mean(transaction$Transaction1)
t1median <- calculate_median(transaction$Transaction1)
t2mean <- calculate_mean(transaction$Transaction2)
t2median <- calculate_median(transaction$Transaction2)
paste("t1 mean is ", t1mean,", and t2 median is ", t1median)
paste("t2 mean is ", t2mean,", and t2 median is ", t2median)
# set transaction1 value type to character type
transaction$Transaction1 <- as.character(transaction$Transaction1)
# we find all values in transaction1 equal to 0, and we index it for replacement
transIndex <- transaction$Transaction1 == "0"
# We replace all the occurances of the index value with NULL
transaction$Transaction1[transIndex] <- "NULL"
example <- transaction$Transaction1[order(transaction$Row)]
example
# Please see #1
x <- transact$X
t1 <- transact$t1
t2 <- transact$t2
time <- transact$time
transaction <- data.frame(subset(transact, t1 >= 0 & time <= 10))
knitr::opts_chunk$set(echo = TRUE)
# Mean function
calculate_mean <- function(numbers) {
s = sum(numbers)
N = length(numbers)
# Calculate the mean
result = s / N
return (result)
}
# Median function
calculate_median <-function(numbers) {
N = length(numbers)
sort(numbers)
# Fine the median
if (N %% 2 == 0) {
# if N is even, convert to int and match position
m1 = as.integer(N / 2) - 1
m2 = as.integer((N / 2) + 1) - 1
median = (numbers[m1] + numbers[m2]) / 2
} else {
# Convert to integer, match position
m = as.integer((N + 1) / 2) - 1
median = numbers[m]
}
return (round(median))
}
# Import transaction data into R
mydata = read.csv("https://raw.githubusercontent.com/maldonag/KVGMV9AW8U/master/CUNY-SPS/R%20Bridge/Week2/Homework2/Transact.csv")  # read csv file
transact <- data.frame(mydata)
summary(transact)
# Mean and median for attributes t1 and t2
t1mean <- calculate_mean(transact$t1)
t1median <- calculate_median(transact$t1)
t2mean <- calculate_mean(transact$t2)
t2median <- calculate_median(transact$t2)
paste("t1 mean is ", t1mean,", and t2 median is ", t1median)
paste("t2 mean is ", t2mean,", and t2 median is ", t2median)
x <- transact$X
t1 <- transact$t1
t2 <- transact$t2
time <- transact$time
transaction <- data.frame(subset(transact, t1 >= 0 & time <= 10))
colnames(transaction) <- c("Row", "Transaction1", "Transaction2", "Time")
summary(transaction)
t1mean <- calculate_mean(transaction$Transaction1)
t1median <- calculate_median(transaction$Transaction1)
t2mean <- calculate_mean(transaction$Transaction2)
t2median <- calculate_median(transaction$Transaction2)
paste("t1 mean is ", t1mean,", and t2 median is ", t1median)
paste("t2 mean is ", t2mean,", and t2 median is ", t2median)
# set transaction1 value type to character type
transaction$Transaction1 <- as.character(transaction$Transaction1)
# we find all values in transaction1 equal to 0, and we index it for replacement
transIndex <- transaction$Transaction1 == "0"
# We replace all the occurances of the index value with NULL
transaction$Transaction1[transIndex] <- "NULL"
example <- transaction$Transaction1[order(transaction$Row)]
example
# Please see #1
x <- transact$X
t1 <- transact$t1
t2 <- transact$t2
time <- transact$time
transaction <- data.frame(subset(transact, t1 >= 0 & time >= 100))
knitr::opts_chunk$set(echo = TRUE)
# Mean function
calculate_mean <- function(numbers) {
s = sum(numbers)
N = length(numbers)
# Calculate the mean
result = s / N
return (result)
}
# Median function
calculate_median <-function(numbers) {
N = length(numbers)
sort(numbers)
# Fine the median
if (N %% 2 == 0) {
# if N is even, convert to int and match position
m1 = as.integer(N / 2) - 1
m2 = as.integer((N / 2) + 1) - 1
median = (numbers[m1] + numbers[m2]) / 2
} else {
# Convert to integer, match position
m = as.integer((N + 1) / 2) - 1
median = numbers[m]
}
return (round(median))
}
# Import transaction data into R
mydata = read.csv("https://raw.githubusercontent.com/maldonag/KVGMV9AW8U/master/CUNY-SPS/R%20Bridge/Week2/Homework2/Transact.csv")  # read csv file
transact <- data.frame(mydata)
summary(transact)
# Mean and median for attributes t1 and t2
t1mean <- calculate_mean(transact$t1)
t1median <- calculate_median(transact$t1)
t2mean <- calculate_mean(transact$t2)
t2median <- calculate_median(transact$t2)
paste("t1 mean is ", t1mean,", and t2 median is ", t1median)
paste("t2 mean is ", t2mean,", and t2 median is ", t2median)
x <- transact$X
t1 <- transact$t1
t2 <- transact$t2
time <- transact$time
transaction <- data.frame(subset(transact, t1 >= 0 & time >= 100))
colnames(transaction) <- c("Row", "Transaction1", "Transaction2", "Time")
summary(transaction)
t1mean <- calculate_mean(transaction$Transaction1)
t1median <- calculate_median(transaction$Transaction1)
t2mean <- calculate_mean(transaction$Transaction2)
t2median <- calculate_median(transaction$Transaction2)
paste("t1 mean is ", t1mean,", and t2 median is ", t1median)
paste("t2 mean is ", t2mean,", and t2 median is ", t2median)
# set transaction1 value type to character type
transaction$Transaction1 <- as.character(transaction$Transaction1)
# we find all values in transaction1 equal to 0, and we index it for replacement
transIndex <- transaction$Transaction1 == "0"
# We replace all the occurances of the index value with NULL
transaction$Transaction1[transIndex] <- "NULL"
example <- transaction$Transaction1[order(transaction$Row)]
example
# Please see #1
transaction$Transaction1[order(transaction$Row)]
paste(transaction$Transaction1[order(transaction$Row)])
#transaction$Transaction1[order(transaction$Row)]
transaction[0, 261]
#transaction$Transaction1[order(transaction$Row)]
transaction[6]
#transaction$Transaction1[order(transaction$Row)]
transaction[L,]
#transaction$Transaction1[order(transaction$Row)]
transaction[0]
#transaction$Transaction1[order(transaction$Row)]
transaction
#transaction$Transaction1[order(transaction$Row)]
print(transaction)
#transaction$Transaction1[order(transaction$Row)]
print(transaction[0:10])
#transaction$Transaction1[order(transaction$Row)]
print(transaction[0:10,])
#transaction$Transaction1[order(transaction$Row)]
print(transaction[0:100,])
transaction[0:100,]
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(echo = FALSE)
library(reticulate)
install.packages("reticulate")
library(reticulate)
use_python("/usr/local/bin/python")
Y
